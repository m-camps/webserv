

- Parse Config File
- Make sockets in Network based on total ports
- Distribute port fd's to servers who need it
- Poll()
- If socket fd: Accept Connection based on fd
- If client fd: Extract all possible servers based on the fd
- Send to Exchange -> all possible servers (std::vector<Servers>), current_fd(int), requestStr(std::string)
- Exchange:
	- Parse requestStr
	- Based on requestData matchServer() -> returns Server(Server)
	- Based on requestData and server matchLocation() -> returns locationName(std::string)
	- Response(requestData(map<std::string, std::string>), server(Server), locationName(std::string))
	
TODO:
- Make recv only stop on seperator(CLRF)
- No default location add location
- (Done) Rewrite Poll struct to use std::vector<pollfd*> for readability and to remove malloc (std::vector.data() for beginning of struct) 
- make std::map<int, std::vector<Server&>> to easily send Exchange matching filedescriptors
- rewrite acceptConnection to be based on fd instead of Server, then add it to the std::map<int, std::vector<Server&>>

1 socket_fd multiple servers
1 client_fd multiple possible Servers